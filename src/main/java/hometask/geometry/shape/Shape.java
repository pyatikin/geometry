package hometask.geometry.shape;

import hometask.geometry.base.Line;
import hometask.geometry.base.Point;

/**
 * Интерфейс для геометрических фигур на плоскости.
 * <p>
 * Определяет основные методы для работы с фигурами
 */
public interface Shape {

    /**
     * Вычисляет периметр фигуры.
     *
     * @return периметр фигуры в виде числа типа double.
     */
    double perimeter();

    /**
     * Вычисляет площадь фигуры.
     *
     * @return площадь фигуры в виде числа типа double.
     */
    double area();

    /**
     * Проверяет, равна ли текущая фигура другой фигуре.
     *
     * @param another другая фигура для сравнения.
     * @return true, если фигуры совпадают как множества точек, иначе false.
     */
    boolean equals(Shape another);

    /**
     * Проверяет, является ли текущая фигура конгруэнтной другой фигуре.
     * <p>
     * Конгруэнтные фигуры равны в геометрическом смысле, что означает,
     * что их можно совместить движением плоскости.
     *
     * @param another другая фигура для проверки на конгруэнтность.
     * @return true, если фигуры конгруэнтны, иначе false.
     */
    boolean isCongruentTo(Shape another);

    /**
     * Проверяет, является ли текущая фигура подобной другой фигуре.
     * <p>
     * Подобные фигуры имеют одинаковую форму, но могут иметь разные размеры.
     *
     * @param another другая фигура для проверки наподобие.
     * @return true, если фигуры подобны, иначе false.
     */
    boolean isSimilarTo(Shape another);

    /**
     * Проверяет, содержит ли фигура заданную точку.
     *
     * @param point точка для проверки на принадлежность фигуре.
     * @return true, если точка находится внутри фигуры, иначе false.
     */
    boolean containsPoint(Point point);


    /**
     * Поворачивает фигуру на заданный угол вокруг указанной точки.
     *
     * @param center точка, вокруг которой будет осуществляться поворот.
     * @param angle угол поворота в градусах (положительное значение —
     * против часовой стрелки).
     * @return новая фигура, представляющая результат поворота.
     */
    Shape rotate(Point center, double angle);

    /**
     * Отражает фигуру относительно заданной точки.
     *
     * @param center точка, относительно которой будет осуществлено
     * отражение.
     * @return новая фигура, представляющая результат отражения.
     */
    Shape reflect(Point center);

    /**
     * Отражает фигуру относительно заданной прямой.
     *
     * @param axis прямая, относительно которой будет осуществлено
     * отражение.
     * @return новая фигура, представляющая результат отражения.
     */
    Shape reflect(Line axis);

    /**
     * Масштабирует фигуру относительно заданной точки с заданным коэффициентом.
     *
     * @param center точка, относительно которой будет происходить масштабирование.
     * @param coefficient коэффициент масштабирования (например, 2.0 для увеличения
     * в 2 раза).
     * @return новая фигура, представляющая результат масштабирования.
     */
    Shape scale(Point center, double coefficient);
}
